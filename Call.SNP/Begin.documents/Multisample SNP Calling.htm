<html><head>
<meta http-equiv="content-type" content="text/html; charset=gbk">
<title>Multisample SNP Calling</title>
<link rel="stylesheet" type="text/css" href="Multisample%20SNP%20Calling_files/style.css" media="screen">
<style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style><style type="text/css">.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; }</style></head>
<body>
<div id="wrap">
<div id="header">
  <table border="0" bordercolor="white" cellspacing="0" width="100%">
	  <tbody><tr><td width="83%"><h1>SAMtools</h1></td>
	  <td style="vertical-align:middle"><a href="http://sourceforge.net/"><img src="Multisample%20SNP%20Calling_files/sflogo.png" alt="SourceForge.net Logo" border="0" height="37" width="125"></a></td>
	</tr></tbody></table>
</div>
<div id="menu">
  <ul>
	<li><a href="http://samtools.sourceforge.net/index.shtml">Home</a></li>
  </ul>
</div>


<div id="widemain">
<!-- BEGIN OF THE MAIN BODY  -->

<h2>Calling SNPs/INDELs with SAMtools/BCFtools</h2>

<h3>The basic Command line</h3>
<p>Suppose we have reference sequences in <i>ref.fa</i>, indexed
  by <b>samtools faidx</b>, and position sorted alignment
  files <i>aln1.bam</i> and <i>aln2.bam</i>, the following command lines
  call SNPs and short INDELs:
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>samtools&nbsp;mpileup&nbsp;-uf&nbsp;ref.fa&nbsp;aln1.bam&nbsp;aln2.bam&nbsp;|&nbsp;bcftools&nbsp;view&nbsp;-bvcg&nbsp;-&nbsp;&gt;&nbsp;var.raw.bcf&nbsp;&nbsp;</span></span></li><li class=""><span>bcftools&nbsp;view&nbsp;var.raw.bcf&nbsp;|&nbsp;vcfutils.pl&nbsp;varFilter&nbsp;-D100&nbsp;&gt;&nbsp;var.flt.vcf&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  samtools mpileup -uf ref.fa aln1.bam aln2.bam | bcftools view -bvcg - &gt; var.raw.bcf
  bcftools view var.raw.bcf | vcfutils.pl varFilter -D100 &gt; var.flt.vcf</textarea>

  where the <b>-D</b> option sets the maximum read depth to call a
  SNP. SAMtools acquires sample information from the <b>SM</b> tag in
  the <b>@RG</b> header lines. One alignment file can contain multiple
  samples; reads from one sample can also be distributed in different
  alignment files. SAMtools will regroup the reads anyway. In addition,
  if no <b>@RG</b> lines are present, each alignment file is taken as
  one sample.
</p>
<p>Since r865, it is possible to generate the consensus sequence with
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>samtools&nbsp;mpileup&nbsp;-uf&nbsp;ref.fa&nbsp;aln.bam&nbsp;|&nbsp;bcftools&nbsp;view&nbsp;-cg&nbsp;-&nbsp;|&nbsp;vcfutils.pl&nbsp;vcf2fq&nbsp;&gt;&nbsp;cns.fq&nbsp;&nbsp;</span></span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  samtools mpileup -uf ref.fa aln.bam | bcftools view -cg - | vcfutils.pl vcf2fq &gt; cns.fq</textarea>
</p>
<h3>Understanding the command line</h3>
<p>
  In the command line above, <b>samtools</b> collects summary
  information in the input BAMs, computes the likelihood of data given
  each possible genotype and stores the likelihoods in the BCF format
  (see below). It does not call variants.
</p>
<p>
  <b>Bcftools</b> applies the prior and does the actual calling. It can
  also concatenate BCF files, index BCFs for fast random access and
  convert BCF to VCF. In addition, <b>bcftools</b> can operate on some
  VCFs (e.g. calling SNPs from GL-tagged VCFs), but not for all VCFs;
  VCF to BCF conversion is not working at the moment, either.
</p>
<h3>Tuning the parameters</h3>
<p>
  One should consider to apply the following parameters
  to <b>mpileup</b> in different scenarios:
  </p><ul>
	<li>Apply <b>-C50</b> to reduce the effect of reads with excessive
	  mismatches. This aims to fix overestimated mapping quality and
	  appears to be preferred for BWA-short.
	</li><li>Given multiple technologies, apply <b>-P</b> to specify which
	  technologies to use for collecting initial INDEL candidates. It is
	  recommended to find INDEL candidates from technologies with low
	  INDEL error rate, such as Illumina. When this option is in use,
	  the value(s) following the option must appear in the <b>PL</b> tag
	  in the <b>@RG</b> header lines.
	</li><li>Apply <b>-D</b> and <b>-S</b> to keep per-sample read depth and
	  strand bias. This is preferred if there are more than one samples
	  at high coverage.
	</li><li>Adjust <b>-m</b> and <b>-F</b> to control when to initiate indel
	  realignment (requiring r877+). Samtools only finds INDELs where
	  there are sufficient reads containing the INDEL at the same
	  position. It does this to avoid excessive realignment that is
	  computationally demanding. The default works well for many
	  low-coverage samples but not for, say, 500 exomes. In the latter
	  case, using <b>-m 3 -F 0.0002</b> (3 supporting reads at minimum
	  0.02% frequency) is necessary to find singletons.
	</li><li>Use `<b>-BQ0 -d10000000 -f ref.fa</b>' if the purpose is to get
	  the precise depth of coverage rather than call SNPs. Under this
	  setting, <b>mpileup</b> will count low-quality bases, process all
	  reads (by default the depth is capped at 8000), and skip the
	  time-demanding BAQ calculation.
	</li><li>Apply <b>-A</b> to use anomalous read pairs in <b>mpileup</b>,
	  which are not used by default (requring r874+).
  </li></ul>
<p></p>

<h3>Understanding the output: the VCF/BCF format</h3>
<h4>The VCF format</h4>
<p>
  The <a href="http://vcftools.sourceforge.net/specs.html">Variant
  Call Format</a> (VCF) is the emerging standard for storing variant
  data. Originally designed for SNPs and short INDELs, it also works for
  structural variations.
</p>
<p>
  VCF consists of a header section and a data section. The header must
  contain a line starting with one '#', showing the name of each field,
  and then the sample names starting at the 10th column. The data section
  is TAB delimited with each line consisting of at least 8 mandatory
  fields (the first 8 fields in the table below). The FORMAT field and
  sample information are allowed to be absent. We refer to the
  official <a href="http://vcftools.sourceforge.net/specs.html">VCF
  spec</a> for a more rigorous description of the format.
</p>
<table>
  <tbody><tr><th>Col</th><th>Field</th><th>Description</th></tr>
  <tr><td>1</td><td>CHROM</td><td>Chromosome name</td></tr>
  <tr><td>2</td><td>POS</td><td>1-based position. For an indel, this is the position preceding the indel.</td></tr>
  <tr><td>3</td><td>ID</td><td>Variant identifier. Usually the dbSNP rsID.</td></tr>
  <tr><td>4</td><td>REF</td><td>Reference sequence at POS involved in the variant. For a SNP, it is a single base.</td></tr>
  <tr><td>5</td><td>ALT</td><td>Comma delimited list of alternative seuqence(s).</td></tr>
  <tr><td>6</td><td>QUAL</td><td>Phred-scaled probability of all samples being homozygous reference.</td></tr>
  <tr><td>7</td><td>FILTER</td><td>Semicolon delimited list of filters that the variant fails to pass.</td></tr>
  <tr><td>8</td><td>INFO</td><td>Semicolon delimited list of variant information.</td></tr>
  <tr><td>9</td><td>FORMAT</td><td>Colon delimited list of the format of individual genotypes in the following fields.</td></tr>
  <tr><td>10+</td><td>Sample(s)</td><td>Individual genotype information defined by FORMAT.</td></tr>
</tbody></table>
<br>
<h4>The BCF Format</h4>
<p>
  BCF, or the binary variant call format, is the binary version of
  VCF. It keeps the same information in VCF, while much more efficient
  to process especially for many samples. The relationship between BCF
  and VCF is similar to that between BAM and SAM. The detailed format
  description of the BCF format can be found in <i>bcf.tex</i> included
  in the samtools source code package.
</p>
<h4>SAMtools/BCFtools specific information</h4>
<p>
  SAMtools/BCFtools may write the following tags in the <i>INFO</i> field in
  VCF/BCF.
</p>
<table>
  <tbody><tr><th>Tag</th><th>Description</th></tr>
  <tr><th>I16</th><td>16 integers:
		<table>
		  <tbody><tr><td>1</td><td>#reference Q13 bases on the forward strand
		  </td><td>2</td><td>#reference Q13 bases on the reverse strand
		  </td></tr><tr><td>3</td><td>#non-ref Q13 bases on the forward strand
		  </td><td>4</td><td>#non-ref Q13 bases on the reverse strand
		  </td></tr><tr><td>5</td><td>sum of reference base qualities
		  </td><td>6</td><td>sum of squares of reference base qualities
		  </td></tr><tr><td>7</td><td>sum of non-ref base qualities
		  </td><td>8</td><td>sum of squares of non-ref base qualities
		  </td></tr><tr><td>9</td><td>sum of ref mapping qualities
		  </td><td>10</td><td>sum of squares of ref mapping qualities
		  </td></tr><tr><td>11</td><td>sum of non-ref mapping qualities
		  </td><td>12</td><td>sum of squares of non-ref mapping qualities
		  </td></tr><tr><td>13</td><td>sum of tail distance for ref bases
		  </td><td>14</td><td>sum of squares of tail distance for ref bases
		  </td></tr><tr><td>15</td><td>sum of tail distance for non-ref bases
		  </td><td>16</td><td>sum of squares of tail distance for non-ref
		</td></tr></tbody></table></td></tr>
  <tr><th>INDEL</th><td>Indicating the variant is an INDEL.</td></tr>
  <tr><th>DP</th><td>The number of reads covering or bridging POS.</td></tr>
  <tr><th>DP4</th><td>Number of 1) forward ref alleles; 2) reverse ref; 3)
		forward non-ref; 4) reverse non-ref alleles, used in variant
		calling. Sum can be smaller than DP because low-quality bases are not counted.</td></tr>
  <tr><th>PV4</th><td>P-values for 1) strand bias (exact test); 2) baseQ bias
  (t-test); 3) mapQ bias (t); 4) tail distance bias (t)</td></tr>
  <tr><th>FQ</th><td>Consensus quality. If positive, FQ equals the phred-scaled probability of there being two or more different alleles.
  	If negative, FQ equals the minus phred-scaled probability of all chromosomes being identical. Notably,
	given one sample, FQ is positive at hets and negative at homs.</td></tr>
  <tr><th>AF1</th><td>EM estimate of the site allele frequency of the strongest non-reference allele.</td></tr>
  <tr><th>CI95</th><td>Equal-tail (Bayesian) credible interval of the site allele frequency at the 95% level.</td></tr>
  <tr><th>PC2</th><td>Phred-scaled probability of the alternate allele frequency of group1 samples being
  		larger (,smaller) than of group2 samples.</td></tr>
  <tr><th>PCHI2</th><td>Posterior weighted chi^2 P-value between group1 and group2 samples. This P-value is conservative.</td></tr>
  <tr><th>QCHI2</th><td>Phred-scaled PCHI2</td></tr>
  <tr><th>RP</th><td>Number of permutations yeilding a smaller PCHI2</td></tr>
</tbody></table>
<ul>
  <li>For a read, suppose the k-th base is overlapping the reference
	base we are looking at. The tail distance for this read equals
	min{k-1,l-k} where l is the length of the read. If tail distance is
	small, the difference on the read may be caused by undetected
	indels.
  </li><li>In the BCF generated by SAMtools, an non-ref base 'X' represents
	an base has not been seen from the alignment data. Such a base is
	necessary to evaluate the probability of missing a non-ref allele
	due to sampling fluctuation.
  </li><li>FQ is computed by taking a folded prior (i.e. p'(k)=[p(k)+p(n-k)]/2). It measures
  	if the locus is polymophic among samples. The <b>vcf2fq</b> command
	replies on this annotation.
  </li><li>SAMtools/BCFtools writes genotype likelihoods in the PL format
	which is a comma delimited list of phred-scaled data likelihoods of
	each possible genotype. For example, suppose REF=C and ALT=A,G,
	PL=7,0,37,13,40,49 means for the sample we are looking at,
	P(D|CC)=10^{-0.7}, P(D|CA)=1, P(D|AA)=10^{-3.7}, P(D|CG)=10^{-1.3},
	P(D|AG)=1e-4 and P(D|GG)=10^{-4.9}. This ordering has been changed
	since r921.
  </li><li>PC2, PCHI2 and QCHI2 are only present with `view -1' is set.
</li></ul>
<h2>Performing Association Test</h2>
<p>The following command performs association test:
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>samtools&nbsp;mpileup&nbsp;-uf&nbsp;ref.fa&nbsp;all-aln.bam&nbsp;|&nbsp;bcftools&nbsp;view&nbsp;-vcs&nbsp;xxx&nbsp;-1&nbsp;yyy&nbsp;-&nbsp;&gt;&nbsp;out.vcf&nbsp;&nbsp;</span></span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  samtools mpileup -uf ref.fa all-aln.bam | bcftools view -vcs xxx -1 yyy - &gt; out.vcf</textarea>

  where `xxx' is a file containing the list of samples with the first `yyy'
  samples being cases (or controls) and the rest being controls (or cases).
  In the output, the PCHI2 INFO field gives the P-value of association.
  This P-value is known to be conservative, in the sense that the true P-value
  is probably smaller (more significant). Nonetheless, in practice PCHI2 appears to be a good
  indicator of associations. On a QQ-plot for negative controls, expected P-value and observed PCHI2 fall
  on a straight line, though not on the diagonal.</p>
  
<p>To further calibrate P-value, one
  may perform a permutation test with the `-U' option. The `RP' INFO field
  will give the number of permutations which yield a smaller PCHI2 test statistics.
  Permutation test is very slow, due to the genotype ambiguity in sequencing data.
</p>
<br>
<h2>Estimating the Allele Frequency Spectrum</h2>
<p>
  While calling SNPs, <b>bcftools</b> will print the estimated AFS to
  the error output at lines starting with <tt>[afs]</tt>. However, to
  accurately estimate AFS, we need to iterate the procedure. In most
  applications, we are only interested in the AFS conditional on a list
  of loci. Suppose we have the list of loci in file <i>cond.txt</i>
  with the first two columns in the file giving the coordinates, the
  procedure to estimate AFS is:
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>bcftools&nbsp;view&nbsp;-NIbl&nbsp;cond.txt&nbsp;data.bcf&nbsp;&gt;&nbsp;cond.bcf&nbsp;&nbsp;</span></span></li><li class=""><span>bcftools&nbsp;view&nbsp;-cGP&nbsp;cond2&nbsp;cond.bcf&nbsp;&gt;&nbsp;round1.vcf&nbsp;2&gt;&nbsp;round1.afs&nbsp;&nbsp;</span></li><li class="alt"><span>bcftools&nbsp;view&nbsp;-cGP&nbsp;round1.afs&nbsp;cond.bcf&nbsp;&gt;&nbsp;/dev/null&nbsp;2&gt;&nbsp;round2.afs&nbsp;&nbsp;</span></li><li class=""><span>bcftools&nbsp;view&nbsp;-cGP&nbsp;round2.afs&nbsp;cond.bcf&nbsp;&gt;&nbsp;/dev/null&nbsp;2&gt;&nbsp;round3.afs&nbsp;&nbsp;</span></li><li class="alt"><span>......&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  bcftools view -NIbl cond.txt data.bcf &gt; cond.bcf
  bcftools view -cGP cond2 cond.bcf &gt; round1.vcf 2&gt; round1.afs
  bcftools view -cGP round1.afs cond.bcf &gt; /dev/null 2&gt; round2.afs
  bcftools view -cGP round2.afs cond.bcf &gt; /dev/null 2&gt; round3.afs
  ......</textarea>

  until the AFS converges, which usually takes less than 10 rounds of EM
  iterations. The first command line above extracts sites
  in <i>cond.txt</i> for efficiency in later steps. Option <b>-P</b>
  specifies the initial AFS (in SNP calling, this is prior), which can
  be a file (as in the 3rd and 4th command lines) or '<i>full</i>',
  '<i>cond2</i>' or '<i>flat</i>' (as in the 2nd command line). Choosing
  the right initial AFS helps accuracy and reduces iterations and
  potential overfitting.
</p>
<p>
  Another way to estimate AFS is to get the list of site allele
  frequency by
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>perl&nbsp;-ne&nbsp;</span><span class="string">'print&nbsp;"$1\n"&nbsp;if&nbsp;/AF1=([^,;]+)/'</span><span>&nbsp;round1.vcf&nbsp;&nbsp;</span></span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  perl -ne 'print "$1\n" if /AF1=([^,;]+)/' round1.vcf</textarea> and
  then derive the histogram. It should be noted that AF1 does not use
  the initial AFS. No iterations are needed. However, the histogram of
  AF1 usually has a lot of noises. It is up to the users to decide which
  method to use.
</p>
<br>
<h2>Base Alignment Quality (BAQ)</h2>
<p>
  Base Alignment Quality (BAQ) is a new concept deployed in
  samtools-0.1.9+. It aims to provide an efficient and effective way to
  rule out false SNPs caused by nearby INDELs. The following shows the
  alignments of 6 reads by a typical read mapper in the presence of a
  4bp homozygous INDEL:
</p>
<pre><u> coor     12345678901234    5678901234567890123456 </u>
 ref      aggttttataaaac----aattaagtctacagagcaacta
<u> sample   aggttttataaaacAAATaattaagtctacagagcaacta </u>
 read1    aggttttataaaac****<u>aaAt</u>aa
 read2     ggttttataaaac****<u>aaAt</u>aaTt
 read3         ttataaaac<u>AAAT</u>aattaagtctaca
 read4             C<u>aaaT</u>****aattaagtctacagagcaac
 read5               <u>aaT</u>****aattaagtctacagagcaact
 read6                 <u>T</u>****aattaagtctacagagcaacta
</pre>
<p>
where capital bases represent differences from the reference and
underlined bases are the inserted bases. The alignments except for read3
are wrong because the 4bp insertion is misplaced. The mapper produces
such alignments because when doing a pairwise alignment, the mapper
prefers one or two mismatches over a 4bp insertion. What is hurting more
is that the wrong alignments lead to recurrent mismatches, which are
likely to deceive most site-independent SNP callers into calling false
SNPs.
</p>
<p>
  One way to avoid such an artifact is to do multi-sequence realignment,
  but the current implementations are very computationally
  demanding. SAMtools seeks another solution. It assigns each base a BAQ
  which is the Phred-scaled probability of the base being
  misaligned. BAQ is low if the base is aligned to a different reference
  base in a suboptimal alignment, and in this case a mismatch should
  contribute little to SNP calling even if the base quality is
  high. With BAQ, the mismatches in the example above are significantly
  downweighted. SAMtools will not call SNPs from that.
</p>
<p>
  The BAQ strategy is invoked by default in <b>mpileup</b>. To make
  other SNP callers take advantage of BAQ, one should run
  <div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>samtools&nbsp;calmd&nbsp;-Abr&nbsp;aln.bam&nbsp;ref.fa&nbsp;&gt;&nbsp;aln.baq.bam&nbsp;&nbsp;</span></span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  samtools calmd -Abr aln.bam ref.fa &gt; aln.baq.bam</textarea> to cap
  base quality by BAQ and then give <i>aln.baq.bam</i> to the SNP
  callers as the input. For high-coverage single-sample SNP calling, BAQ
  appears to be as effective as multi-sequence realignment, while being
  much faster and easier to use. Currently the BAQ strategy is the only
  practical way to avoid the INDEL artifact in low-coverage multi-sample
  SNP calling.
</p>
<br>

<h2>Limitations</h2>
<ul>
  <li>BCFtools does not properly handle multi-allelic variants. It only
	takes the strongest non-reference allele.
  </li><li>SAMtools does not properly compute the likelihoods of
	multi-allelic INDELs.
  </li><li>The VCF file produced by BCFtools does not strictly conform the
	VCF spec. For example, the GT genotype information is not always
	present because for the purpose of BCF, GT is unnecessary and takes
	disk space. In addition, GT is not the first as is required by the
	VCF spec. This can be fixed by the <b>bcf-fix.pl</b> script that
	comes with the source code package, and will be fixed in future
	(fixed in r880+).
</li></ul>

<h2>Appendix: Use Cases</h2>
<h3>SNP/INDEL calling for hundreds of exomes</h3>
<p>
  The following shows the detailed procedure on how to call SNPs/INDELs
  for hundreds of exomes. It only aims to provide an overview of how to
  handle huge data sets. Some command lines given below may not work for
  all systems. Advanced users may also want to modify based on their own
  system configurations.</p>
<p>In the following, the key and the most
  difficult part is the command line calling <b>samtools
  mpileup</b>. Once that is done, one can use 3rd party tools or write
  their own scsripts to achieve the rest.
</p>
<h4>Input and preparation</h4>
<ul>
  <li>Obtain auxiliary scripts/programs: array job submission
	script <b><a href="http://lh3lh3.users.sourceforge.net/download/asub">asub</a></b>,
	basic BED processing
	utility <b><a href="http://lh3lh3.users.sourceforge.net/download/bedutils.pl">bedutils.pl</a></b>,
	<a href="http://lh3lh3.users.sourceforge.net/download/sort-20101217.tar.bz2">alphanumeric sort</a>
	and <b><a href="http://sourceforge.net/projects/samtools/files/tabix/">tabix</a></b>:
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>export&nbsp;PATH=</span><span class="string">"$HOME/bin:$PATH"</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>wget&nbsp;http:<span class="comment">//lh3lh3.users.sourceforge.net/download/asub</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>wget&nbsp;http:<span class="comment">//lh3lh3.users.sourceforge.net/download/bedutils.pl</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>cp&nbsp;asub&nbsp;bedutils.pl&nbsp;$HOME/bin&nbsp;&nbsp;</span></li><li class="alt"><span>wget&nbsp;http:<span class="comment">//lh3lh3.users.sourceforge.net/download/sort-20101217.tar.bz2</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>tar&nbsp;-jxf&nbsp;sort-20101217.tar.bz2&nbsp;&nbsp;</span></li><li class="alt"><span>(cd&nbsp;sort-20101217;&nbsp;make;&nbsp;cp&nbsp;sort&nbsp;$HOME/bin/sort-alt)&nbsp;&nbsp;</span></li><li class=""><span>wget&nbsp;http:<span class="comment">//sourceforge.net/projects/samtools/files/tabix/tabix-0.2.3.tar.bz2/download</span><span>&nbsp;&nbsp;</span></span></li><li class="alt"><span>tar&nbsp;-jxf&nbsp;tabix-0.2.3.tar.bz2;&nbsp;&nbsp;</span></li><li class=""><span>(cd&nbsp;tabix-0.2.3;&nbsp;make;&nbsp;cp&nbsp;tabix&nbsp;bgzip&nbsp;$HOME/bin)&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  export PATH="$HOME/bin:$PATH"
  wget http://lh3lh3.users.sourceforge.net/download/asub
  wget http://lh3lh3.users.sourceforge.net/download/bedutils.pl
  cp asub bedutils.pl $HOME/bin
  wget http://lh3lh3.users.sourceforge.net/download/sort-20101217.tar.bz2
  tar -jxf sort-20101217.tar.bz2
  (cd sort-20101217; make; cp sort $HOME/bin/sort-alt)
  wget http://sourceforge.net/projects/samtools/files/tabix/tabix-0.2.3.tar.bz2/download
  tar -jxf tabix-0.2.3.tar.bz2;
  (cd tabix-0.2.3; make; cp tabix bgzip $HOME/bin)</textarea>
  </li><li>Check out a more recent version of samtools
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>svn&nbsp;co&nbsp;https:</span><span class="comment">//samtools.svn.sourceforge.net/svnroot/samtools/trunk/samtools</span><span>&nbsp;&nbsp;</span></span></li><li class=""><span>(cd&nbsp;samtools;&nbsp;make;&nbsp;cp&nbsp;samtools&nbsp;bcftools/{bcftools,vcfutils.pl}&nbsp;$HOME/bin)&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  svn co https://samtools.svn.sourceforge.net/svnroot/samtools/trunk/samtools
  (cd samtools; make; cp samtools bcftools/{bcftools,vcfutils.pl} $HOME/bin)</textarea>
  </li><li>The reference sequence file <i>ref.fa</i>. To avoid potential
	mistakes, <i>ref.fa</i> is better the one that is used for read
	mapping. File <i>ref.fa</i> should be indexed by samtools' faidx, if
	this has not been done.
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>samtools&nbsp;faidx&nbsp;ref.fa&nbsp;&nbsp;</span></span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  samtools faidx ref.fa</textarea>
  </li><li>File <i>bam.list</i> which gives the paths of indexed BAM files,
	one line per file. These files should be better tagged with read
	groups; if not, one BAM per sample.
  </li><li>File <i>target.bed</i> which gives the target regions in the BED format.
</li></ul>
<h4>Procedure</h4>
<ul>
  <li>Calling SNPs/INDELs in small regions 
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>vcfutils.pl&nbsp;splitchr&nbsp;-l&nbsp;500000&nbsp;|&nbsp;xargs&nbsp;-i&nbsp;\&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;echo&nbsp;samtools&nbsp;mpileup&nbsp;-C50&nbsp;-m3&nbsp;-F0.0002&nbsp;-DSuf&nbsp;ref.fa&nbsp;-r&nbsp;{}&nbsp;-b&nbsp;bam.list&nbsp;\|&nbsp;bcftools&nbsp;\&nbsp;&nbsp;</span></li><li class="alt"><span>&nbsp;&nbsp;view&nbsp;-bcvg&nbsp;-&nbsp;\&gt;&nbsp;part-{}.bcf&nbsp;|&nbsp;aub&nbsp;-j&nbsp;run-part&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  vcfutils.pl splitchr -l 500000 | xargs -i \
    echo samtools mpileup -C50 -m3 -F0.0002 -DSuf ref.fa -r {} -b bam.list \| bcftools \
    view -bcvg - \&gt; part-{}.bcf | aub -j run-part</textarea>
  </li><li>Merge regions
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>cut&nbsp;-f1&nbsp;ref.fa.fai&nbsp;|&nbsp;xargs&nbsp;-i&nbsp;echo&nbsp;grep&nbsp;^part-{}&nbsp;\|&nbsp;sort-alt&nbsp;-N&nbsp;\|&nbsp;xargs&nbsp;\&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;bcftools&nbsp;cat&nbsp;\&gt;&nbsp;chr-{}.bcf&nbsp;&nbsp;</span></li><li class="alt"><span>awk&nbsp;<span class="string">'{print&nbsp;"chr-"$1".bcf"}'</span><span>&nbsp;ref.fa.fai&nbsp;|&nbsp;xargs&nbsp;bcftools&nbsp;cat&nbsp;&gt;&nbsp;merge.bcf&nbsp;&nbsp;</span></span></li><li class=""><span>bcftools&nbsp;index&nbsp;merge.bcf&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  cut -f1 ref.fa.fai | xargs -i echo grep ^part-{} \| sort-alt -N \| xargs \
    bcftools cat \&gt; chr-{}.bcf
  awk '{print "chr-"$1".bcf"}' ref.fa.fai | xargs bcftools cat &gt; merge.bcf
  bcftools index merge.bcf</textarea>
To make sure <i>merge.bcf</i> is correctly generated, one should use bcftools view
to retrieve data towards the end of the last chromosome. If something goes wrong
in data processing, no data will be retrieved. When we confirm <i>merge.bcf</i> is
correct, we may delete intermediate files <i>part-*.bcf</i> and <i>chr-*.bcf</i>.
  </li><li>Extract target regions
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>bcftools&nbsp;view&nbsp;-G&nbsp;merge.bcf&nbsp;|&nbsp;vcfutils.pl&nbsp;varFilter&nbsp;-w0&nbsp;-10&nbsp;-20&nbsp;-30&nbsp;-40&nbsp;-Q0&nbsp;\&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;|&nbsp;bgzip&nbsp;&gt;&nbsp;merge.vcf.gz&nbsp;&nbsp;</span></li><li class="alt"><span>tabix&nbsp;-fpvcf&nbsp;merge.vcf.gz&nbsp;&nbsp;</span></li><li class=""><span>sort-alt&nbsp;-k1,1N&nbsp;-k2,2n&nbsp;target.bed&nbsp;|&nbsp;bedutils.pl&nbsp;<span class="keyword">union</span><span>&nbsp;\&nbsp;&nbsp;</span></span></li><li class="alt"><span>&nbsp;&nbsp;|&nbsp;awk&nbsp;<span class="string">'{print&nbsp;$1":"($2+1)"-"$3}'</span><span>&nbsp;|&nbsp;xargs&nbsp;tabix&nbsp;merge.vcf.gz&nbsp;\&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;|&nbsp;bgzip&nbsp;&gt;&nbsp;target.vcf.gz&nbsp;&nbsp;</span></li><li class="alt"><span>bcftools&nbsp;view&nbsp;-bl&nbsp;target.vcf.gz&nbsp;&gt;&nbsp;target.bcf&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  bcftools view -G merge.bcf | vcfutils.pl varFilter -w0 -10 -20 -30 -40 -Q0 \
    | bgzip &gt; merge.vcf.gz
  tabix -fpvcf merge.vcf.gz
  sort-alt -k1,1N -k2,2n target.bed | bedutils.pl union \
    | awk '{print $1":"($2+1)"-"$3}' | xargs tabix merge.vcf.gz \
    | bgzip &gt; target.vcf.gz
  bcftools view -bl target.vcf.gz &gt; target.bcf</textarea>
Here we use <b>tabix</b> to retrieve target regions, which is a little complicated.
In future new functionality may be added to <b>bcftools</b> to simplify this step.
  </li><li>Filtering. For now, an effective way of filtering is unknown. For
  indels, one may consider the following:
<div class="dp-highlighter nogutter"><div class="bar"></div><ol class="dp-cpp" start="1"><li class="alt"><span><span>bcftools&nbsp;view&nbsp;-GM&nbsp;target.bcf&nbsp;|&nbsp;grep&nbsp;INDEL&nbsp;\&nbsp;&nbsp;</span></span></li><li class=""><span>&nbsp;&nbsp;|&nbsp;vcfutils.pl&nbsp;varFilter&nbsp;-10&nbsp;-20&nbsp;-30&nbsp;-40&nbsp;-a4&nbsp;-G90&nbsp;-S30&nbsp;&nbsp;</span></li></ol></div><textarea style="display: none;" name="code" class="c:nocontrols:nogutter" cols="60" rows="10">  bcftools view -GM target.bcf | grep INDEL \
    | vcfutils.pl varFilter -10 -20 -30 -40 -a4 -G90 -S30</textarea>
  although more effective filters may be existing. For INDELs, one may
  use the fraction of frameshift indels as a proxy to specificity.
</li></ul>

<!-- END OF THE MAIN BODY  -->
<link type="text/css" rel="stylesheet" href="Multisample%20SNP%20Calling_files/SyntaxHighlighter.css">
<script language="javascript" src="Multisample%20SNP%20Calling_files/shCore.js"></script>
<script language="javascript" src="Multisample%20SNP%20Calling_files/shBrushCpp.js"></script>
<script language="javascript">
  dp.SyntaxHighlighter.HighlightAll('code');
</script>
</div>

<div style="clear: both;"> </div>
<div id="footer">
<hr>
<p style="text-align: right;">Last modified: 2010-12-17</p>
</div>
</div>


</body></html>